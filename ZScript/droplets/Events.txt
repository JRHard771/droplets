class DropletsEventHandler : EventHandler
{
	Array<String> bloodTypes;
	bool blood_gibs, blood_pools;
	
	override void OnRegister()
	{
		blood_gibs = CVar.FindCVar("blood_gibs").GetBool();
		blood_pools = CVar.FindCVar("blood_pools").GetBool();
		Super.OnRegister();
	}
	
	override void WorldTick()
	{
		blood_gibs = CVar.FindCVar("blood_gibs").GetBool();
		blood_pools = CVar.FindCVar("blood_pools").GetBool();
		Super.WorldTick();
	}
	
	override void WorldThingDamaged(WorldEvent e)
	{
		let mo = e.Thing;
		if (!mo.bISMONSTER || mo.bNOBLOOD)
			return;
		
		if (mo.health <= 0)
		{
			if (blood_gibs &&
				(!(e.Inflictor && e.Inflictor.bNoExtremeDeath) &&
				(mo.health < mo.GetGibHealth() ||
				(e.Inflictor && e.Inflictor.bExtremeDeath)) &&
				(mo.FindState("XDeath") || mo.FindState("Death.Extreme"))) ||
				blood_alwaysgib)
			{
				let giblets = Actor.Spawn('GibSpray',mo.pos + (0,0,32));
				giblets.master = mo;
				giblets.translation = mo.bloodtranslation;
				giblets.vel = mo.vel;
			}
				
			if (!blood_pools)
				return;
			
			let pool = Actor.Spawn('BloodPool2',mo.pos);
			pool.translation = mo.bloodtranslation;
			pool.master = mo;
		}
	}
	
	//===========================================================================
	//
	//		Stolen from NashGore
	//
	//===========================================================================

	override void WorldLoaded(WorldEvent e)
	{
		BuildBloodTypes();
	}

	override void CheckReplacement(ReplaceEvent e)
	{
		// blood stuff
		for (int i = 0; i < bloodTypes.Size(); i++)
		{
			// find all known blood types from the BLUDTYPE lump
			class<Actor> miscBloodCls;
			miscBloodCls = String.Format("%s", bloodTypes[i]);

			if (e.Replacee == "Blood" || e.Replacee == "BloodSplatter" || e.Replacee == "AxeBlood"
				|| (miscBloodCls != NULL && e.Replacee == miscBloodCls))
			{
				e.Replacement = "BloodSquirt";
			}
		}
	}
	
	void BuildBloodTypes(void)
	{
		bloodTypes.Clear();

		int lump = -1;
		while (-1 != (lump = Wads.FindLump('BLUDTYPE', lump + 1)))
		{
			String data = Wads.ReadLump(lump);

			// split lines
			Array<String> lines;
			lines.Clear();
			data.Split(lines, "\n", TOK_KEEPEMPTY);

			// strip comments
			for (int i = 0; i < lines.Size(); i++)
			{
				if (lines[i].IndexOf("//") == 0)
				{
					continue;
				}
				else
				{
					bloodTypes.Push(lines[i]);
				}
			}

			// [lolhack] remove the last line because it's usually blank
			//bloodTypes.Delete(bloodTypes.Size() - 1, 1);
		}

		//Console.Printf("size: %d", bloodTypes.Size());
		for (int i = 0; i < bloodTypes.Size(); i++)
		{
			// delete that weird character that gets added at the end
			bloodTypes[i].Truncate(bloodTypes[i].Length() - 1);

			/*
			if (bloodTypes[i])
			{
				Console.Printf("%s\n", bloodTypes[i]);
			}
			*/
		}
	}

}

